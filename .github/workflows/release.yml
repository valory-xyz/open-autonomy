name: Release Flow

# Controls when the action will run.
on:
  release:
    types: [published]

jobs:
  publish-pip-packages:
    name: Create Framework & Plugin Releases
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: ["3.10"]
    steps:
      - uses: actions/checkout@master
      - uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          sudo apt-get update --fix-missing
          sudo apt-get autoremove
          sudo apt-get autoclean
          python -m pip install --upgrade pip
          pip install pipenv twine
          python --version

      - name: Build wheels and source tarball
        run: |
          echo Processing open-autonomy
          pipenv run make dist

          echo Processing aea-test-autonomy
          cd plugins/aea-test-autonomy
          pipenv run python setup.py sdist bdist_wheel
          cd ../..

      - name: Publish open-autonomy Framework to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
          skip_existing: true
          packages_dir: dist/

      - name: Publish open-aea-test-autonomy Plugin to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
          skip_existing: true
          packages_dir: plugins/aea-test-autonomy/dist/

  publish-autonomy-packages:
    name: Push Open Autonomy Packages
    runs-on: ${{ matrix.os }}
    needs:
      - publish-pip-packages
    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: ["3.10"]

    steps:
      - uses: actions/checkout@master
      - uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          sudo apt-get update --fix-missing
          sudo apt-get autoremove
          sudo apt-get autoclean
          python -m pip install --upgrade pip
          pip install open-autonomy[all] --no-cache

      - name: Push Packages
        run: |
          autonomy init --reset --author valory --ipfs --remote
          autonomy push-all

  publish-deploy-images:
    name: Publish Deploy Images
    runs-on: ubuntu-latest
    needs:
      - publish-autonomy-packages
    steps:
      - uses: actions/checkout@v2
      - name: Docker login
        env:
          DOCKER_USER: ${{secrets.DOCKER_USER}}
          DOCKER_PASSWORD: ${{secrets.DOCKER_PASSWORD}}
        run: |
          docker login -u $DOCKER_USER -p $DOCKER_PASSWORD
      - name: Set up support for multi platform build
        run: |
          docker run --privileged --rm tonistiigi/binfmt --install all
          docker buildx create --use --name multibuild
          docker buildx inspect --bootstrap
      - name: Set up tag
        run: echo export TAG=$(python3 -c "from setup import about; print(about[\"__version__\"])") > env.sh
      - name: Build and push version tagged images
        run: |
          # export `TAG` variable
          source env.sh
          docker buildx build --platform linux/amd64,linux/arm64,linux/arm/v7 -t valory/open-autonomy:$TAG deployments/Dockerfiles/autonomy --push
          docker buildx build --platform linux/amd64,linux/arm64,linux/arm/v7 -t valory/open-autonomy:latest deployments/Dockerfiles/autonomy --push

  publish-user-images:
    name: Publish User Images
    runs-on: ubuntu-22.04
    needs:
      - publish-autonomy-packages
    steps:
      - uses: actions/checkout@v2
      - name: Docker login
        env:
          DOCKER_USER: ${{secrets.DOCKER_USER}}
          DOCKER_PASSWORD: ${{secrets.DOCKER_PASSWORD}}
        run: |
          docker login -u $DOCKER_USER -p $DOCKER_PASSWORD
      - name: Set up support for multi platform build
        run: |
          docker run --privileged --rm tonistiigi/binfmt --install all
          docker buildx create --use --name multibuild
          docker buildx inspect --bootstrap
      - name: Set up tag
        run: echo export TAG=$(python3 -c "from setup import about; print(about[\"__version__\"])") > env.sh
      - name: Build and push version tagged images
        run: |
          # export `TAG` variable
          source env.sh
          docker buildx build --platform linux/amd64,linux/arm64,linux/arm/v7 -t valory/open-autonomy-user:$TAG deployments/Dockerfiles/autonomy-user --push
          docker buildx build --platform linux/amd64,linux/arm64,linux/arm/v7 -t valory/open-autonomy-user:latest deployments/Dockerfiles/autonomy-user --push

  publish-helper-images:
    name: Publish Helper Images
    runs-on: ubuntu-latest
    needs:
      - publish-autonomy-packages
    steps:
      - uses: actions/checkout@v2
      - name: Docker login
        env:
          DOCKER_USER: ${{secrets.DOCKER_USER}}
          DOCKER_PASSWORD: ${{secrets.DOCKER_PASSWORD}}
        run: |
          docker login -u $DOCKER_USER -p $DOCKER_PASSWORD
      - name: Set up support for multi platform build
        run: |
          docker run --privileged --rm tonistiigi/binfmt --install all
          docker buildx create --use --name multibuild
          docker buildx inspect --bootstrap
      - name: Set up tag
        run: echo export TAG=$(python3 -c "from setup import about; print(about[\"__version__\"])") > env.sh
      - name: Build and push version tagged images
        run: |
          # export `TAG` variable
          source env.sh

          docker buildx build --platform linux/amd64,linux/arm64,linux/arm/v7 -t valory/open-autonomy-tendermint:$TAG deployments/Dockerfiles/tendermint --push
          docker buildx build --platform linux/amd64,linux/arm64,linux/arm/v7 -t valory/open-autonomy-tendermint:latest deployments/Dockerfiles/tendermint --push

          docker buildx build --platform linux/amd64,linux/arm64 -t valory/open-autonomy-hardhat:$TAG deployments/Dockerfiles/hardhat --push
          docker buildx build --platform linux/amd64,linux/arm64 -t valory/open-autonomy-hardhat:latest deployments/Dockerfiles/hardhat --push

  publish-dev-image:
    name: Publish Develop Image
    runs-on: ubuntu-latest
    needs:
      - publish-autonomy-packages
    steps:
      - uses: actions/checkout@v2
      - name: Docker login
        env:
          DOCKER_USER: ${{secrets.DOCKER_USER}}
          DOCKER_PASSWORD: ${{secrets.DOCKER_PASSWORD}}
        run: |
          docker login -u $DOCKER_USER -p $DOCKER_PASSWORD
      - name: Set up support for multi platform build
        run: |
          docker run --privileged --rm tonistiigi/binfmt --install all
          docker buildx create --use --name multibuild
          docker buildx inspect --bootstrap
      - name: Set up tag
        run: echo export TAG=$(python3 -c "from setup import about; print(about[\"__version__\"])") > env.sh
      - name: Build and push version tagged images
        run: |
          # export `TAG` variable
          source env.sh
          
          docker buildx build --platform linux/amd64,linux/arm64,linux/arm/v7 -t valory/open-autonomy-dev:$TAG deployments/Dockerfiles/development --push
          docker buildx build --platform linux/amd64,linux/arm64,linux/arm/v7 -t valory/open-autonomy-dev:latest deployments/Dockerfiles/development --push
