name: main_workflow

on:
  push:
    branches:
      - develop
      - main
  pull_request:

jobs:
  lock_check:
    continue-on-error: False
    runs-on: ubuntu-latest

    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: ["3.10"]

    timeout-minutes: 10

    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@master
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        sudo apt-get update --fix-missing
        sudo apt-get autoremove
        sudo apt-get autoclean
        pip install pipenv
    - name: Pipenv install requirements and check it can be locked
      run: |
        pipenv --clear
        pipenv install --dev --skip-lock
        pipenv run pip install -e .[all]
        pipenv lock

  copyright_doc_and_pipfile_check:
    continue-on-error: False
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: ["3.10"]

    timeout-minutes: 30

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - uses: actions/setup-python@master
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run:  |
        sudo apt-get update --fix-missing
        sudo apt-get autoremove
        sudo apt-get autoclean
        pip install tox
        pip install --user --upgrade setuptools
    - name: Check copyright
      run: tox -e check-copyright
    - name: Check docs
      run: tox -e check-api-docs
    - name: Check doc links and IPFS hashes
      run: tox -e check-doc-links-hashes
    - name: Check pipfiles
      run: tox -e check-pipfiles

  linter_checks:
    continue-on-error: False
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: ["3.10"]

    timeout-minutes: 30

    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@master
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run:  |
        sudo apt-get update --fix-missing
        sudo apt-get autoremove
        sudo apt-get autoclean
        pip install tox
        pip install --user --upgrade setuptools
        # install Protobuf compiler
        wget https://github.com/protocolbuffers/protobuf/releases/download/v3.19.4/protoc-3.19.4-linux-x86_64.zip
        unzip protoc-3.19.4-linux-x86_64.zip -d protoc
        sudo mv protoc/bin/protoc /usr/local/bin/protoc
        # install IPFS
        sudo apt-get install -y wget
        sudo npm install -g markdown-spellcheck
        wget -O ./go-ipfs.tar.gz https://dist.ipfs.io/go-ipfs/v0.6.0/go-ipfs_v0.6.0_linux-amd64.tar.gz
        tar xvfz go-ipfs.tar.gz
        sudo mv go-ipfs/ipfs /usr/local/bin/ipfs
        ipfs init
        make protolint_install
    - name: Check generate protocols
      run: tox -e check-generate-all-protocols
    - name: Security checks
      run: |
        tox -e bandit
        tox -e safety
    - name: Check packages
      run: tox -e check-packages
    - name: Check hash
      run: tox -e check-hash
    - name: Code style check
      run: |
        tox -e black-check
        tox -e isort-check
        tox -e flake8
        tox -e vulture
        tox -e darglint
    - name: Static type check
      run: tox -e mypy
    - name: Pylint
      run: tox -e pylint
    - name: Check spelling
      run: tox -e spell-check
    - name: AbciApp consistency checks
      run: |
        tox -e check-abci-docstrings
        tox -e check-abciapp-specs
        tox -e check-handlers

  scan:
    name: gitleaks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/setup-go@v3
        with:
          go-version: "1.17.7"
      - run: |
          wget https://github.com/zricethezav/gitleaks/releases/download/v8.10.1/gitleaks_8.10.1_linux_x64.tar.gz && \
          tar -xzf gitleaks_8.10.1_linux_x64.tar.gz && \
          sudo install gitleaks /usr/bin && \
          gitleaks detect --report-format json --report-path leak_report

  test:
    continue-on-error: True
    needs:
      - lock_check
      - copyright_doc_and_pipfile_check
      - linter_checks
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
        python-version: [ "3.7", "3.8", "3.9", "3.10" ]

    timeout-minutes: 50

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - uses: actions/setup-python@master
        with:
          python-version: ${{ matrix.python-version }}
      - uses: actions/setup-go@v3
        with:
          go-version: "1.17.7"
      - if: matrix.os == 'ubuntu-latest'
        name: Install dependencies (ubuntu-latest)
        run: |
          sudo apt-get update --fix-missing
          sudo apt-get autoremove
          sudo apt-get autoclean
          pip install tox
          pip install --user --upgrade setuptools

          # install Protobuf compiler
          wget https://github.com/protocolbuffers/protobuf/releases/download/v3.19.4/protoc-3.19.4-linux-x86_64.zip
          unzip protoc-3.19.4-linux-x86_64.zip -d protoc
          sudo mv protoc/bin/protoc /usr/local/bin/protoc

          # install IPFS
          sudo apt-get install -y wget
          wget -O ./go-ipfs.tar.gz https://dist.ipfs.io/go-ipfs/v0.6.0/go-ipfs_v0.6.0_linux-amd64.tar.gz
          tar xvfz go-ipfs.tar.gz
          sudo mv go-ipfs/ipfs /usr/local/bin/ipfs
          ipfs init

          # install Tendermint
          wget -O tendermint.tar.gz https://github.com/tendermint/tendermint/releases/download/v0.34.19/tendermint_0.34.19_linux_amd64.tar.gz
          tar -xf tendermint.tar.gz
          sudo mv tendermint /usr/local/bin/tendermint

          # install skaffold
          curl -Lo skaffold https://storage.googleapis.com/skaffold/releases/v1.39.1/skaffold-linux-amd64 && \
          sudo chmod +x skaffold
          sudo install skaffold /usr/local/bin/
          skaffold --help

          # pull node image needed for the integration tests
          docker pull node:16.7.0
          docker pull trufflesuite/ganache:beta

          # build required images

          skaffold build --push=false
          skaffold build -p release --push=false
          docker build deployments/Dockerfiles/tendermint/ -t valory/open-autonomy-tendermint:0.1.0 --file deployments/Dockerfiles/tendermint/Dockerfile
          docker build deployments/Dockerfiles/tendermint/ -t valory/open-autonomy-tendermint:1.0.0 --file deployments/Dockerfiles/tendermint/Dockerfile

          # build hardhat node in third_party/safe-contracts
          cd third_party/safe-contracts &&\
            sudo chown -R $(whoami) .husky &&\
            yarn

          # build hardhat node in third_party/contracts-amm
          cd ../..
          cd third_party/contracts-amm &&\
            yarn

          # build hardhat node in third_party/autonolas-registries
          cd ../..
          cd third_party/autonolas-registries &&\
            yarn

      - if: matrix.os == 'ubuntu-latest'
        name: Unit tests ubuntu-latest
        run: |
          tox -e py${{ matrix.python-version }}-linux -- -m 'not e2e'

      - if: matrix.os == 'macos-latest'
        name: Install dependencies (macos-latest)
        run: |
          pip install tox
          brew install gcc
          # brew install protobuf
          # brew install https://raw.githubusercontent.com/Homebrew/homebrew-core/72457f0166d5619a83f508f2345b22d0617b5021/Formula/protobuf.rb
          wget https://github.com/protocolbuffers/protobuf/releases/download/v3.19.4/protoc-3.19.4-osx-x86_64.zip
          unzip protoc-3.19.4-osx-x86_64.zip -d protoc
          sudo mv protoc/bin/protoc /usr/local/bin/protoc
          brew tap yoheimuta/protolint
          brew install protolint

          # install ipfs
          curl -O https://dist.ipfs.io/go-ipfs/v0.6.0/go-ipfs_v0.6.0_darwin-amd64.tar.gz
          tar -xvzf go-ipfs_v0.6.0_darwin-amd64.tar.gz
          cd go-ipfs
          sudo ./install.sh
          cd ..
          rm -rf go-ipfs
          ipfs init

          # install Tendermint
          wget -O tendermint.tar.gz https://github.com/tendermint/tendermint/releases/download/v0.34.19/tendermint_0.34.19_darwin_amd64.tar.gz
          tar -xf tendermint.tar.gz
          sudo mv tendermint /usr/local/bin/tendermint

          # install skaffold
          curl -Lo skaffold https://storage.googleapis.com/skaffold/releases/v1.39.1/skaffold-darwin-amd64 && \
          sudo chmod +x skaffold
          sudo install skaffold /usr/local/bin/
          skaffold --help

          # pull node image needed for the integration tests
          # we don't run tests that require docker images on MacOS
          # docker pull node:16.7.0
          # docker pull trufflesuite/ganache:beta

          # build hardhat node in third_party/safe-contracts
          # cd third_party/safe-contracts &&\
          #   sudo chown -R $(whoami) .husky &&\
          #   yarn
          # cd ../..

          # # build hardhat node in third_party/contracts-amm
          # cd third_party/contracts-amm &&\
          #   yarn
          # cd ../..
          
          # # build hardhat node in third_party/autonolas-registries
          # cd third_party/autonolas-registries &&\
          #   yarn
          # cd ../..


      - if: matrix.os == 'macos-latest'
        name: Unit tests macos-latest
        run: |
          tox -e py${{ matrix.python-version }}-darwin -- -m 'not e2e'

      - if: matrix.os == 'windows-latest'
        name: Install dependencies (windows-latest)
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: true
        run: |
          python -m pip install -U pip
          echo "::add-path::C:\Program Files (x86)\Windows Kits\10\bin\10.0.18362.0\x64"
          choco install wget -y
          choco install protoc --version 3.19.4
          choco install mingw -y
          choco install make -y
          # to check make was installed
          make --version
          pip install tox
          # wget https://github.com/protocolbuffers/protobuf/releases/download/v3.19.4/protoc-3.19.4-win64.zip
          # unzip protoc-3.19.4-win64.zip -d protoc
          # sudo mv protoc/bin/protoc /usr/local/bin/protoc

          python scripts\update_symlinks_cross_platform.py

          # TODO: install protolint
          #echo "::set-env name=GOPATH::$(go env GOPATH)"
          #echo "::add-path::$(go env GOPATH)/bin"
          #make protolint_install_win
          # just check protolint runs
          #protolint version

          # install ipfs
          curl https://dist.ipfs.io/go-ipfs/v0.6.0/go-ipfs_v0.6.0_windows-amd64.zip -o go-ipfs_v0.6.0.zip
          Expand-Archive -Path go-ipfs_v0.6.0.zip -DestinationPath ~\Apps\
          cp ~\Apps\go-ipfs\ipfs.exe C:\Users\runneradmin\go\bin\
          ipfs init

          # install Tendermint
          wget -O tendermint.tar.gz https://github.com/tendermint/tendermint/releases/download/v0.34.19/tendermint_0.34.19_windows_amd64.tar.gz
          tar -xvzf tendermint.tar.gz
          cp tendermint.exe C:\Users\runneradmin\go\bin\

          # install skaffold
          curl -Lo skaffold https://storage.googleapis.com/skaffold/releases/v1.39.1/skaffold-windows-amd64.exe
          cp skaffold C:\Users\runneradmin\go\bin\
          skaffold --help

          # pull node image needed for the integration tests
          # we don't run tests that require docker images on Windows
          # docker pull node:16.7.0
          # docker pull trufflesuite/ganache:beta

          # # build hardhat node in third_party/safe-contracts
          # cd third_party\safe-contracts
          # yarn
          # cd ..\..

          # # build hardhat node in third_party/contracts-amm
          # cd third_party\contracts-amm
          # yarn
          # cd ..\..

          # # build hardhat node in third_party/autonolas-registries
          # cd third_party\autonolas-registries
          # yarn
          # cd ..\..

      - if: matrix.os == 'windows-latest'
        name: Unit tests windows-latest
        run: |
          tox -e py${{ matrix.python-version }}-win -- -m 'not e2e'

      - if: matrix.os == 'ubuntu-latest'
        name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  e2e:
    continue-on-error: True
    needs:
      - lock_check
      - copyright_doc_and_pipfile_check
      - linter_checks
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ ubuntu-latest ]
        python-version: [ "3.10" ]

    timeout-minutes: 120

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - uses: actions/setup-python@master
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          sudo apt-get update --fix-missing
          sudo apt-get autoremove
          sudo apt-get autoclean
          pip install tox
          pip install --user --upgrade setuptools

          # install Protobuf compiler
          wget https://github.com/protocolbuffers/protobuf/releases/download/v3.19.4/protoc-3.19.4-linux-x86_64.zip
          unzip protoc-3.19.4-linux-x86_64.zip -d protoc
          sudo mv protoc/bin/protoc /usr/local/bin/protoc

          # install IPFS
          sudo apt-get install -y wget
          wget -O ./go-ipfs.tar.gz https://dist.ipfs.io/go-ipfs/v0.6.0/go-ipfs_v0.6.0_linux-amd64.tar.gz
          tar xvfz go-ipfs.tar.gz
          sudo mv go-ipfs/ipfs /usr/local/bin/ipfs
          ipfs init

          # install Tendermint
          wget -O tendermint.tar.gz https://github.com/tendermint/tendermint/releases/download/v0.34.19/tendermint_0.34.19_linux_amd64.tar.gz
          tar -xf tendermint.tar.gz
          sudo mv tendermint /usr/local/bin/tendermint


          # ensure yarn is installed
          curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -
          echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list
          sudo apt update
          sudo apt install yarn -y

          # pull node image needed for the integration tests
          docker pull node:16.7.0
          docker pull trufflesuite/ganache:beta
          # build hardhat node in third_party/safe-contracts
          cd third_party/safe-contracts &&\
            sudo chown -R $(whoami) .husky &&\
            yarn
          # build hardhat node in third_party/contracts-amm
          cd ../..
          cd third_party/contracts-amm &&\
            yarn

          # install Skaffold needed in order to build the Flask with Tendermint image
          curl -Lo skaffold https://storage.googleapis.com/skaffold/releases/v1.39.1/skaffold-linux-amd64 &&\
            sudo install skaffold /usr/local/bin/

      - name: Unit tests
        run: |
          tox --develop -e py${{ matrix.python-version }} -- -m 'e2e'
